
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author kanishka
 */
public class main extends javax.swing.JFrame {

    JFileChooser fc;
    File[] input_img = null;
    File output_loc = null;
    File save_path = null;
    File temp_path = null;
    File temp_create = null;
    File output_filename = null;
    int curr_img = 0;

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        heading_lbl = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        input_panel = new javax.swing.JPanel();
        input_shower = new javax.swing.JLabel();
        input_control = new javax.swing.JPanel();
        select_btn = new javax.swing.JButton();
        clear_btn = new javax.swing.JButton();
        filename_lbl = new javax.swing.JLabel();
        filename_out = new javax.swing.JLabel();
        quality_slider = new javax.swing.JSlider();
        quality_val = new javax.swing.JLabel();
        output_control = new javax.swing.JPanel();
        savePath_btn = new javax.swing.JButton();
        save_out = new javax.swing.JTextArea();
        conversion_panel = new javax.swing.JPanel();
        outputFileType = new javax.swing.JComboBox();
        convert_btn = new javax.swing.JButton();
        exit_btn = new javax.swing.JButton();
        to_lbl = new javax.swing.JLabel();
        pdf_filename = new javax.swing.JTextField();
        pdfname_lbl = new javax.swing.JLabel();
        prev_btn = new javax.swing.JButton();
        next_btn = new javax.swing.JButton();
        count_lbl = new javax.swing.JLabel();
        img_count = new javax.swing.JLabel();
        output_panel = new javax.swing.JPanel();
        output_preview = new javax.swing.JLabel();
        FX_panel = new javax.swing.JPanel();
        FX_lbl = new javax.swing.JLabel();
        effect_choose = new javax.swing.JComboBox();
        preview_btn = new javax.swing.JButton();
        clearFX_btn = new javax.swing.JButton();
        saveFX_btn = new javax.swing.JButton();
        angle_lbl = new javax.swing.JLabel();
        angle_in = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ImageMagick GUI");
        setResizable(false);

        heading_lbl.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        heading_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heading_lbl.setText("ImageMagick GUI");

        input_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Image"));

        input_shower.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        input_control.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        select_btn.setText("Select Image(s)");
        select_btn.setToolTipText("Multiple Images Allowed");
        select_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                select_btnMouseClicked(evt);
            }
        });

        clear_btn.setText("Clear Image(s)");
        clear_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clear_btnMouseClicked(evt);
            }
        });

        filename_lbl.setText("File Name");

        filename_out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        filename_out.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        quality_slider.setMajorTickSpacing(1);
        quality_slider.setMinimum(1);
        quality_slider.setBorder(javax.swing.BorderFactory.createTitledBorder("Conversion Quality"));
        quality_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quality_sliderStateChanged(evt);
            }
        });

        quality_val.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        quality_val.setForeground(new java.awt.Color(255, 0, 0));
        quality_val.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quality_val.setText("50");
        quality_val.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout input_controlLayout = new javax.swing.GroupLayout(input_control);
        input_control.setLayout(input_controlLayout);
        input_controlLayout.setHorizontalGroup(
            input_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_controlLayout.createSequentialGroup()
                .addComponent(quality_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, input_controlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(input_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(quality_val, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filename_out, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, input_controlLayout.createSequentialGroup()
                        .addComponent(filename_lbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(select_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        input_controlLayout.setVerticalGroup(
            input_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_controlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(select_btn)
                .addGap(18, 18, 18)
                .addComponent(clear_btn)
                .addGap(18, 18, 18)
                .addComponent(filename_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filename_out, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quality_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(quality_val)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        output_control.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        savePath_btn.setText("Set Conversion Path");
        savePath_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                savePath_btnMouseClicked(evt);
            }
        });

        save_out.setColumns(20);
        save_out.setRows(5);
        save_out.setWrapStyleWord(true);

        javax.swing.GroupLayout output_controlLayout = new javax.swing.GroupLayout(output_control);
        output_control.setLayout(output_controlLayout);
        output_controlLayout.setHorizontalGroup(
            output_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(output_controlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(output_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(output_controlLayout.createSequentialGroup()
                        .addComponent(save_out, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(savePath_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        output_controlLayout.setVerticalGroup(
            output_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(output_controlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(savePath_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(save_out, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        conversion_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Conversion Options"));

        outputFileType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JPG", "PNG", "GIF", "BMP", "Individual PDFs", "Merge to PDF" }));
        outputFileType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                outputFileTypeItemStateChanged(evt);
            }
        });

        convert_btn.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        convert_btn.setText("Convert");
        convert_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                convert_btnMouseClicked(evt);
            }
        });

        exit_btn.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        exit_btn.setText("Exit");
        exit_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exit_btnMouseClicked(evt);
            }
        });

        to_lbl.setText("To:");

        pdf_filename.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pdf_filename.setEnabled(false);

        pdfname_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pdfname_lbl.setText("Set Filename:");

        javax.swing.GroupLayout conversion_panelLayout = new javax.swing.GroupLayout(conversion_panel);
        conversion_panel.setLayout(conversion_panelLayout);
        conversion_panelLayout.setHorizontalGroup(
            conversion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conversion_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conversion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(conversion_panelLayout.createSequentialGroup()
                        .addGroup(conversion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(conversion_panelLayout.createSequentialGroup()
                                .addComponent(to_lbl)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(conversion_panelLayout.createSequentialGroup()
                                .addComponent(pdfname_lbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(conversion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(outputFileType, 0, 222, Short.MAX_VALUE)
                            .addComponent(pdf_filename)))
                    .addGroup(conversion_panelLayout.createSequentialGroup()
                        .addComponent(convert_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
        );

        conversion_panelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {convert_btn, exit_btn});

        conversion_panelLayout.setVerticalGroup(
            conversion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conversion_panelLayout.createSequentialGroup()
                .addGroup(conversion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFileType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(conversion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pdfname_lbl)
                    .addComponent(pdf_filename, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(conversion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit_btn)
                    .addComponent(convert_btn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        prev_btn.setText("PREVIOUS");
        prev_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prev_btnMouseClicked(evt);
            }
        });

        next_btn.setText("NEXT");
        next_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                next_btnMouseClicked(evt);
            }
        });

        count_lbl.setText("Total Images");

        img_count.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        img_count.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        img_count.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout input_panelLayout = new javax.swing.GroupLayout(input_panel);
        input_panel.setLayout(input_panelLayout);
        input_panelLayout.setHorizontalGroup(
            input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(input_shower, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(conversion_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(input_panelLayout.createSequentialGroup()
                        .addComponent(prev_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                        .addComponent(next_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(input_panelLayout.createSequentialGroup()
                        .addGroup(input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(input_panelLayout.createSequentialGroup()
                                .addComponent(count_lbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(img_count, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(input_panelLayout.createSequentialGroup()
                                .addComponent(input_control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(input_panelLayout.createSequentialGroup()
                        .addComponent(output_control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        input_panelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {next_btn, prev_btn});

        input_panelLayout.setVerticalGroup(
            input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_panelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(input_panelLayout.createSequentialGroup()
                        .addGroup(input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(count_lbl)
                            .addComponent(img_count, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(input_panelLayout.createSequentialGroup()
                        .addComponent(input_shower, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(next_btn)
                            .addComponent(prev_btn))))
                .addGroup(input_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(input_panelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conversion_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(input_panelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(output_control, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        output_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Image"));

        output_preview.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        FX_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Effects"));

        FX_lbl.setText("Select Effect:");

        effect_choose.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vertical Mirror", "Horizontal Mirror", "Charcoal Effect", "Auto-Level", "Polaroid Effect", "Grayscale", "Vignette", "Rotate" }));
        effect_choose.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                effect_chooseItemStateChanged(evt);
            }
        });

        preview_btn.setText("Preview");
        preview_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                preview_btnMouseClicked(evt);
            }
        });

        clearFX_btn.setText("Clear");

        saveFX_btn.setText("Save to File");
        saveFX_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveFX_btnMouseClicked(evt);
            }
        });

        angle_lbl.setText("Set Angle:");

        angle_in.setEnabled(false);

        javax.swing.GroupLayout FX_panelLayout = new javax.swing.GroupLayout(FX_panel);
        FX_panel.setLayout(FX_panelLayout);
        FX_panelLayout.setHorizontalGroup(
            FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FX_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveFX_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(FX_panelLayout.createSequentialGroup()
                        .addGroup(FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(FX_panelLayout.createSequentialGroup()
                                .addComponent(FX_lbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(effect_choose, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(FX_panelLayout.createSequentialGroup()
                                .addGroup(FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(preview_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(angle_lbl))
                                .addGap(18, 18, 18)
                                .addGroup(FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(FX_panelLayout.createSequentialGroup()
                                        .addComponent(clearFX_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(angle_in))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        FX_panelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clearFX_btn, preview_btn});

        FX_panelLayout.setVerticalGroup(
            FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FX_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FX_lbl)
                    .addComponent(effect_choose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(angle_lbl)
                    .addComponent(angle_in, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(FX_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preview_btn)
                    .addComponent(clearFX_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveFX_btn)
                .addContainerGap())
        );

        javax.swing.GroupLayout output_panelLayout = new javax.swing.GroupLayout(output_panel);
        output_panel.setLayout(output_panelLayout);
        output_panelLayout.setHorizontalGroup(
            output_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(output_preview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(FX_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        output_panelLayout.setVerticalGroup(
            output_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(output_panelLayout.createSequentialGroup()
                .addComponent(output_preview, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FX_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separator)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(input_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(output_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(heading_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heading_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(input_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(output_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void select_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_select_btnMouseClicked
        curr_img = 0;
        fc = new JFileChooser();
        fc.setApproveButtonText("Choose Image");
        fc.setDialogTitle("Choose Input Image");
        fc.setFileFilter(new file_filter());
        fc.setMultiSelectionEnabled(true);
        fc.setCurrentDirectory(new File("/media/ext_TV/Images/Extras"));
        fc.showOpenDialog(this);
        input_img = fc.getSelectedFiles();
        if (input_img.length >= 1) {
            filename_out.setText(input_img[0].getName());
            try {
                BufferedImage img = ImageIO.read(input_img[0]);
                Image img_scaled = img.getScaledInstance(input_shower.getWidth(), input_shower.getHeight(), Image.SCALE_SMOOTH);
                input_shower.setIcon(new ImageIcon(img_scaled));
            } catch (Exception e) {
                System.out.println(e);
            }
            img_count.setText("" + input_img.length);
        } else {
            JOptionPane.showMessageDialog(null, "Please Select At Least 1 Image", "No Image Selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_select_btnMouseClicked

    private void clear_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clear_btnMouseClicked
        input_img = null;
        input_shower.setIcon(null);
        filename_out.setText("");
        img_count.setText("0");
        curr_img = 0;
        save_out.setText("");
        fc.setAcceptAllFileFilterUsed(true);
        fc = null;
    }//GEN-LAST:event_clear_btnMouseClicked

    private void savePath_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_savePath_btnMouseClicked
        save_out.setBackground(null);
        save_out.setEditable(false);
        save_out.setBorder(null);
        save_out.setLineWrap(true);
        save_out.setWrapStyleWord(true);
        save_out.setFocusable(false);
        save_out.setOpaque(false);
        save_out.setFont(UIManager.getFont("Label.font"));
        fc.setCurrentDirectory(new File("/media/ext_TV/Images/Test Outputs/"));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setApproveButtonText("Save Here");
        fc.setDialogTitle("Save Here");
        fc.setMultiSelectionEnabled(false);
        fc.showOpenDialog(this);
        output_loc = fc.getSelectedFile();
        save_out.setText(output_loc.getPath());
        save_path = new File(output_loc.getPath());
    }//GEN-LAST:event_savePath_btnMouseClicked

    private void exit_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit_btnMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exit_btnMouseClicked

    private void next_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_next_btnMouseClicked
        curr_img = (curr_img + 1) % (input_img.length - 1);
        filename_out.setText(input_img[curr_img].getName());
        try {
            BufferedImage img = ImageIO.read(input_img[curr_img]);
            Image img_scaled = img.getScaledInstance(input_shower.getWidth(), input_shower.getHeight(), Image.SCALE_SMOOTH);
            input_shower.setIcon(new ImageIcon(img_scaled));
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_next_btnMouseClicked

    private void prev_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prev_btnMouseClicked
        curr_img = (curr_img - 1) % (input_img.length);
        filename_out.setText(input_img[curr_img].getName());
        try {
            BufferedImage img = ImageIO.read(input_img[curr_img]);
            Image img_scaled = img.getScaledInstance(input_shower.getWidth(), input_shower.getHeight(), Image.SCALE_SMOOTH);
            input_shower.setIcon(new ImageIcon(img_scaled));
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_prev_btnMouseClicked

    private void convert_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_convert_btnMouseClicked
        if (input_img.length < 1 || input_img.equals(null)) {
            JOptionPane.showMessageDialog(null, "Please Select At Least 1 Image", "No Image Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (save_out.getText() == null || "".equals(save_out.getText())) {
            JOptionPane.showMessageDialog(null, "Please Select Output Location", "No Output Location", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            switch (outputFileType.getSelectedItem().toString()) {
                case "JPG": {
                    for (int x = 0; x < input_img.length; x++) {
                        curr_img = x;
                        File output_filename = new File(save_path.toString() + "/" + input_img[curr_img].getName().substring(0, input_img[curr_img].getName().length() - 4) + "_converted.jpg");
                        String execString = "convert " + "\'" + input_img[curr_img].getAbsolutePath() + "\'" + " -quality " + quality_slider.getValue() + " " + "\'" + output_filename.getName() + "\'";
                        System.out.println(save_path);
                        System.out.println(execString);
                        Runtime run = Runtime.getRuntime();
                        Process process = run.exec(new String[]{"/bin/bash", "-c", execString}, null, save_path);
                        process.waitFor();
                    }
                    break;

                }
                case "PNG": {
                    for (int x = 0; x < input_img.length; x++) {
                        curr_img = x;
                        File output_filename = new File(save_path.toString() + "/" + input_img[curr_img].getName().substring(0, input_img[curr_img].getName().length() - 4) + "_converted.png");
                        String execString = "convert " + "\'" + input_img[curr_img].getAbsolutePath() + "\'" + " -quality " + quality_slider.getValue() + " " + "\'" + output_filename.getName() + "\'";
                        System.out.println(save_path);
                        System.out.println(execString);
                        Runtime run = Runtime.getRuntime();
                        Process process = run.exec(new String[]{"/bin/bash", "-c", execString}, null, save_path);
                        process.waitFor();
                    }
                    break;
                }
                case "GIF": {
                    for (int x = 0; x < input_img.length; x++) {
                        curr_img = x;
                        File output_filename = new File(save_path.toString() + "/" + input_img[curr_img].getName().substring(0, input_img[curr_img].getName().length() - 4) + "_converted.gif");
                        String execString = "convert " + "\'" + input_img[curr_img].getAbsolutePath() + "\'" + " -quality " + quality_slider.getValue() + " " + "\'" + output_filename.getName() + "\'";
                        System.out.println(save_path);
                        System.out.println(execString);
                        Runtime run = Runtime.getRuntime();
                        Process process = run.exec(new String[]{"/bin/bash", "-c", execString}, null, save_path);
                        process.waitFor();
                    }
                    break;
                }
                case "BMP": {
                    for (int x = 0; x < input_img.length; x++) {
                        curr_img = x;
                        File output_filename = new File(save_path.toString() + "/" + input_img[curr_img].getName().substring(0, input_img[curr_img].getName().length() - 4) + "_converted.bmp");
                        String execString = "convert " + "\'" + input_img[curr_img].getAbsolutePath() + "\'" + " -quality " + quality_slider.getValue() + " " + "\'" + output_filename.getName() + "\'";
                        System.out.println(save_path);
                        System.out.println(execString);
                        Runtime run = Runtime.getRuntime();
                        Process process = run.exec(new String[]{"/bin/bash", "-c", execString}, null, save_path);
                        process.waitFor();
                        break;
                    }
                }

                case "Individual PDFs": {
                    for (int x = 0; x < input_img.length; x++) {
                        curr_img = x;
                        File output_filename = new File(save_path.toString() + "/" + input_img[curr_img].getName().substring(0, input_img[curr_img].getName().length() - 4) + "_converted.pdf");
                        String execString = "convert " + "\'" + input_img[curr_img].getAbsolutePath() + "\'" + " -quality " + quality_slider.getValue() + " " + "\'" + output_filename.getName() + "\'";
                        System.out.println(save_path);
                        System.out.println(execString);
                        Runtime run = Runtime.getRuntime();
                        Process process = run.exec(new String[]{"/bin/bash", "-c", execString}, null, save_path);
                        process.waitFor();
                    }
                    break;
                }
                case "Merge to PDF": {
                    if (!"".equals(pdf_filename.getText()) || pdf_filename.getText() != null) {
                        new pdfMerge(input_img, save_path, pdf_filename.getText());
                    }
                    break;
                }
                default:
                    return;
            }

            JOptionPane.showMessageDialog(null, "Conversions Completed Successfully", "Conversion Complete", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException | InterruptedException e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_convert_btnMouseClicked

    private void outputFileTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_outputFileTypeItemStateChanged
        if (outputFileType.getSelectedItem().equals("Merge to PDF")) {
            pdf_filename.setEnabled(true);
        } else {
            pdf_filename.setEnabled(false);
        }
    }//GEN-LAST:event_outputFileTypeItemStateChanged

    private void preview_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_preview_btnMouseClicked
        temp_create = null;
        temp_path = null;
        output_filename = null;
        temp_create = new File(System.getProperty("java.io.tmpdir") + "/imagemagick_preview");
        if (!temp_create.exists()) {
            new File(System.getProperty("java.io.tmpdir") + "/imagemagick_preview").mkdir();
        }

        temp_path = new File(System.getProperty("java.io.tmpdir") + "/imagemagick_preview/" + input_img[curr_img].getName());
        output_filename = new File(save_path.toString() + "/" + input_img[curr_img].getName());
        Path from = Paths.get(input_img[curr_img].getPath());
        Path to = Paths.get(temp_path.getPath());
        new copyImage(from, to);

        switch (effect_choose.getSelectedItem().toString()) {
            case "Rotate": {
                try {
                    String execString = "convert '" + temp_path + "' -rotate " + angle_in.getText() + " " + input_img[curr_img].getName();
                    Runtime run = Runtime.getRuntime();
                    Process process = run.exec(new String[]{"/bin/bash", "-c", execString}, null, temp_create);
                    process.waitFor();
                    BufferedImage img = ImageIO.read(temp_path);
                    Image img_scaled = img.getScaledInstance(output_preview.getWidth(), output_preview.getHeight(), Image.SCALE_SMOOTH);
                    output_preview.setIcon(new ImageIcon(img_scaled));
                } catch (IOException | InterruptedException e) {
                    System.out.println(e);
                }
                break;
            }
            case "Polaroid Effect": {
                try {
                    String execString = "convert '" + temp_path + "' -polaroid " + angle_in.getText() + " " + input_img[curr_img].getName();
                    Runtime run = Runtime.getRuntime();
                    Process process = run.exec(new String[]{"/bin/bash", "-c", execString}, null, temp_create);
                    process.waitFor();
                    BufferedImage img = ImageIO.read(temp_path);
                    Image img_scaled = img.getScaledInstance(output_preview.getWidth(), output_preview.getHeight(), Image.SCALE_SMOOTH);
                    output_preview.setIcon(new ImageIcon(img_scaled));
                } catch (IOException | InterruptedException e) {
                    System.out.println(e);
                }
                break;
            }
        }

        JOptionPane.showMessageDialog(null, "Effects Applied Successfully", "Effects Applied", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_preview_btnMouseClicked

    private void effect_chooseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_effect_chooseItemStateChanged
        if (effect_choose.getSelectedItem().equals("Rotate") || effect_choose.getSelectedItem().equals("Polaroid Effect")) {
            angle_in.setEnabled(true);
        } else {
            angle_in.setEnabled(false);
        }
    }//GEN-LAST:event_effect_chooseItemStateChanged

    private void saveFX_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveFX_btnMouseClicked
        Path from2 = Paths.get(temp_path.getPath());
        Path to2 = Paths.get(output_filename.getPath());
        new copyImage(from2, to2);
        if (removeDirectory.removeDirectory(temp_create) == false) {
            System.out.println("ERROR REMOVING TEMP DIRECTORY");
        }
    }//GEN-LAST:event_saveFX_btnMouseClicked

    private void quality_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quality_sliderStateChanged
        quality_val.setText("Quality: " + quality_slider.getValue() + "%");
    }//GEN-LAST:event_quality_sliderStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FX_lbl;
    private javax.swing.JPanel FX_panel;
    private javax.swing.JTextField angle_in;
    private javax.swing.JLabel angle_lbl;
    private javax.swing.JButton clearFX_btn;
    private javax.swing.JButton clear_btn;
    private javax.swing.JPanel conversion_panel;
    private javax.swing.JButton convert_btn;
    private javax.swing.JLabel count_lbl;
    private javax.swing.JComboBox effect_choose;
    private javax.swing.JButton exit_btn;
    private javax.swing.JLabel filename_lbl;
    private javax.swing.JLabel filename_out;
    private javax.swing.JLabel heading_lbl;
    private javax.swing.JLabel img_count;
    private javax.swing.JPanel input_control;
    private javax.swing.JPanel input_panel;
    private javax.swing.JLabel input_shower;
    private javax.swing.JButton next_btn;
    private javax.swing.JComboBox outputFileType;
    private javax.swing.JPanel output_control;
    private javax.swing.JPanel output_panel;
    private javax.swing.JLabel output_preview;
    private javax.swing.JTextField pdf_filename;
    private javax.swing.JLabel pdfname_lbl;
    private javax.swing.JButton prev_btn;
    private javax.swing.JButton preview_btn;
    private javax.swing.JSlider quality_slider;
    private javax.swing.JLabel quality_val;
    private javax.swing.JButton saveFX_btn;
    private javax.swing.JButton savePath_btn;
    private javax.swing.JTextArea save_out;
    private javax.swing.JButton select_btn;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel to_lbl;
    // End of variables declaration//GEN-END:variables
}
